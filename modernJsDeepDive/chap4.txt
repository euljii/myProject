4장 변수

4.1 변수란 무엇인가

- 코드 실행시 엔진이 코드를 계산(평가 evaluation)하려면 먼저 기호(리터럴 literal, 연산자 operator)의 의미를 알고, 표현식의 의미도 해석(파싱 parsing)할 수 있어야 함
- 식의 의미 해석할 때 컴퓨터는 CPU로 연산, 메모리로 데이터를 기억 
- 메모리 : 데이터를 저장할 수 있는 메모리 셀(하나당 1byte)의 집합체
- 각 셀은 고유의 메모리 주소를 가짐 ; 메모리 공간의 위치
- 메모리에 저장되는 모든 값은 2진수로 저장

- JS는 개발자의직접적인 메모리 제어를 허용x
; os가 사용하고 있는 값을 변경할 경우 시스템이 멈추는 치명적인 오류 발생 가능

- 코드 실행될 때마다 값이 저장될 메모리 주소 변경 
-> 코드 실행 이전에 값이 저장된 메모리 주소를 알 수 x
-> 변수 사용 : 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 상징적인 이름/ 짧게 말하면 값의 위치

- 변수 이름 : 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름
- 변수 값 : 변수에 저장된 값
- 할당 assignment : 변수에 값 저장
- 참조 reference : 변수에 저장된 값을 읽어 들이는 것
-> 변수 이름을 사용해 참조를 요청하면 JS 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근하여 저장된 값 반환

4.2 식별자 
- 식별자 identifier : 변수 이름/ 메모리상 존재하는 어떤 값을 식별할 수 있는 고유한 이름
ex) 함수, 클래스 등

result              0x0669F913      30
변수 이름(식별자)   메모리 주소     메모리

- 선언 declaration 으로 JS 엔진에 식별자 존재를 알림

4.3 변수 선언
- 변수 선언 variable declaration : 변수 생성/값 저장을 위한 메모리 공간 확보 allocate 하고 변수 이름과 확보된 메모리 공간의 주소를 연결 name binding
- 선언시 var, let, const 키워드 사용 (ES6에서 var 단점 보완을 위해 let, const 도입)
- 키워드 : JS 엔진이 수행할 동작을 규정한 일종의 명령어. JS 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행

ex) var score; // 변수 선언(변수 선언문)

- 변수 선언 후 값을 할당하기 전인 경우 : 확보된 메모리 공간에 JS 엔진에 의해 undefined 값이 암묵적으로 할당되어 초기화됨
- 변수 선언 2단계 
    1. 선언단계 : 변수 이름을 등록해서 JS 엔진에 변수의 존재를 알림
    2. 초기화단계 : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화(최초로 값을 할당) 
- 선언하지 않은 식별자에 접근하면 ReferenceError 발생 

4.4 변수 선언의 실행 시점과 변수 호이스팅
- JS 코드는 인터프리터에 의해 한 줄씩 순차적으로 실행
- 선언 이전에 변수에 접근할 경우 ReferenceError 안 뜨고 undefined 뜸
: 런타임 runtime(소스코드가 한 줄씩 실행되는 시점)이 아니라 그 이전 단계에서 먼저 실행되기 때문
- JS 엔진은 소스코드 실행 전, 소스코드의 평가 과정을 거치면서 실행 준비를 함
-> 이때 JS엔진이 소스코드 내 모든 선언문을 찾아서 먼저 실행 
- 변수 호이스팅 variable hoisting : 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징 

4.5 값의 할당
- 할당 연산자 = 사용 : 우변의 값을 좌변의 변수에 할당
ex) console.log(score); // undefined
    var score;  // 변수 선언
    score = 80; // 값의 할당

    ↓ 축약

    var score = 80; // 변수 선언과 값의 할당
- 변수 선언은 런타임 이전에 먼저 실행, 값의 할당은 런타임에 실행
- 변수 선언과 값의 할당을 같이 하든 따로 하든 맨위에 undefined가 할당되어 초기화되는 건 같음
- 그러나 따로 할 경우, 기존 공간에 할당된 값 저장x 새로운 메모리 공간을 확보하고 그곳에 할당 값을 저장하는 것

4.6 값의 재할당
- 재할당 : 저장된 값을 다른 값으로 변경
- 변수는 재할당이 가능하지만 상수 constant는 불가능
- 상수 : 단 한 번만 할당할 수 있는 변수
- 재할당시 새로운 메모리 공간을 확보하고 그곳에 새 값 저장
- 더이상 사용되지 않는 기존 공간은 가비지 콜렉터에 의해 메모리에서 자동 해제됨
(가비지 콜렉터 : 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제하는 기능)

4.7 식별자 네이밍 규칙
- 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($) 포함 가능
- 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($) 시작해야 함. 숫자x.
- 예약어는 식별자로 사용될 수 x(await, break, case 등 프로그래밍에서 사용되거나 예정인 단어)
- JS는 대소문자를 구분
- 네이밍 컨벤션 naming convetion
① 카멜 케이스(camelCase) ② 스네이크 케이스(snake_case) ③ 파스칼 케이스(FascalCase) ④ 헝가리언 케이스(typeHungarianCase)
- JS에서는 일반적으로 션수나 함수에는 카멜 케이스, 생성자 함수나 클래스 이름에는 파스칼 케이스 적용