7장. 연산자
- 연산자 : 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수 연산 등을 수행해 하나의 값을 만듦
- 피연산자 : 연산의 대상 -> 값으로 평가할 수 있어야 함

7.1 산술 연산자
- 피연산자를 대상으로 수학적 계산
- 연산 불가능할 경우 NaN 반환

7.1.1 이항 산술 연산자
- 2개의 피연산자를 산술 연산
- 피연산자의 값을 변경하는 부수효과x
- +, -, *, /, %

7.1.2 단항 산술 연산자
- 1개의 피연산자를 연산하여 숫자 값을 만듦
- 부수효과 o : ++, --
- 부수효과 x : +, -

ex) var x = 1;
    x++; // x = x + 1;
    console.log(x++);   // 2

    x--; // x = x - 1;
    console.log(x--);   // 1

- 전위 증가/감소 연산자 : 먼저 피연산자 값 증가/감소시킨 후, 다른 연산 수행
- 후위 증가/감소 연산자 : 먼저 다른 연산 수행 후 피연산자 값 증가/감소시킴

ex) var x = 5, result;

    // 선 할당 후 증가
    result = x++;
    console.log(result, x); // 5 6

    // 선 증가 후 할당
    result = ++x;
    console.log(result, x); // 7 7

    // 선 할당 후 감소
    result = x--; 
    console.log(result, x); // 7 6

    // 선 감소 후 할당
    result = --x; 
    console.log(result, x); // 5 5

- 숫자 타입 아닌 피연산자에 +, - 단항 연산자 사용시 피연산자 숫자 타입으로 변환하여 반환
ex) var x = '1';
    // 문자열
    console.log(+x);    // 1
    console.log(x);    // '1'
    ='10';  // -10

    x = 'Hello';
    console.log(+x);    // NaN
    console.log(x);    // 'Hello'
    -'Hello';   // NaN

    // 불리언
    x = true;
    console.log(+x);    // 1
    console.log(x);    // true
    -true; // -1

    x = false;
    console.log(+x);    // 0
    console.log(x);    // false

7.1.3 문자열 연결 연산자
- + 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작
(그외는 산술 연산자)
ex) // 문자열 연결 연산자
    '1' + 2;    // '12'
    1 + '2';    // '12'

    // true는 1로 타입 변환
    1 + true;   // 2

    // false는 0으로 타입 변환
    1 + false; // 1

    // null은 0으로 타입 변환
    1 + null; // 1

    // undefined 는 숫자로 타입 변환x
    +undefined; // NaN
    1 + undefined; // NaN

7.2 할당 연산자
- 우항에 있는 피연산자의 평가 결과를 좌항 변수에 할당
- 부수효과o : 피연산자의 값 변경
- =, +=. -=, *=, /=, %=

7.3 비교 연산자
- 좌항, 우항의 피연산자 비교 후 그 결과를 불리언 값으로 반환
- 제어문의 조건식에서 주로 사용(if문, for문)

7.3.1 동등/일치 비교 연산자
- 부수효과x
- 동등 비교 연산자 ( ==, != ) : 값 비교 / 암묵적 타입 변환을 통해 타입 일치시킨 후 값 비교
- 일치 비교 연산자 ( ===, !== ) : 값, 타입 비교 / 타입과 값이 같을 때만 true 반환
 - NaN : 자기 자신과 일치하지 않는 유일한 값
 ex) NaN === NaN;  // false
- Object.is() : 정확한 비교 결과 반환 (===와 동일하게 동작) / ES6 도입
 ex) -0 === +0; // true
     Object.is(-0, +0); // false

     NaN === NaN; // false
     Object.is(NaN, NaN); // true

7.3.2 대소 관계 비교 연산자
- 피연산자 크기를 비교하여 불리언 값 반환
- 부수효과x
ex) var x = 2;
    // 2 % 2는 0이고 0은 false로 암묵적 타입 변환
    var result = x % 2 ? '홀수' : '짝수';
    console.log(result); // '짝수'
- 첫 번째 피연산자가 표현식이자 조건문이므로 if else문과 유사하게 처리 가능
but, if else문은 표현식x 문o -> if else문은 값처럼 사용x
- 삼항 조건 연산자 표현식은 값으로 평가할 수 있는 표현식인 문

7.5 논리 연산자
- 우항, 좌항의 피연산자를 논리 연산
- ||, &&, !
- 평가 결과가 늘 불리언 값은 x
- 논리합(||)이나 논리곱(&&)일 수 있음

7.6 쉼표 연산자
- 왼쪽 피연산자부터 차례대로 평가 후 마지막 피연산자의 평가 결과 반환
ex) var x, y, z;
    x = 1, y = 2, z = 3; // 3

7.7 그룹 연산자
- 소괄호() 감싸는 표현식 가장 먼저 평가 (가장 높은 우선 순위)

7.8 typeof 연산자
- 피연산자의 데이터 타입 문자열로 반환
: string, number, boolean, undefined, symbol, object, function 중 반환
- typeof null;  // object (js 버그)
-> null 확인할 때는 typeof 사용x, 일치 연산자 (===) 사용 권장
- 선언하지 않은 식별자 typeof 사용시 undefined 반환(ReferenceError 안뜸)

7.9 지수 연산자
- 좌항 피연산자를 밑, 우항 피연산자를 지수로 거듭 제곱하여 숫자 값 반환
- ES7 도입
- 음수 사용시 괄호로 묶어야 함
ex) 2 ** 2; // 4
    2 ** 0; // 1
- 지수 연산자 도입 이전에는 Math.pow() 사용
ex) Math.pow(2, 2); // 4
    Math.pow(2, 0);  // 1
- 중복해서 쓸 때 Math.pow()보다 가독성 ↑ (결합 순서는 우항부터- 우결합성)
ex) 2 ** (3 ** 2);  // 512
- 음수를 거듭제곱 밑으로 사용하려면 괄호로 묶어야 함
ex) -5 ** 2; // SyntaxError
    (-5) ** 2; // 25
- 할당 연산자와 함께 사용 가능
ex) var num = 5;
    num **= 2;  // 25

7.10 그외 연산자
- ?., ??, delete, new, instanceof, in

7.11 연산자의 부수 효과
- 부수효과 : 변수 값이 변하여 다른 코드에 영향을 줌
- 부수효과 있는 연산자 : 할당 연산자(=), 증가/감소 연산자(++, --), delete 연산자

7.12 연산자 우선순위
1. ()
2. new(매개변수 존재), ., [](프로퍼티 접근), ()(함수 호출), ?.
3. new(매개변수 존재x)
4. x++, x--
5. !x, +x, -x, ++x, --x, typeof, delete
6. **
7. *, /, %
8. +, -
9. <, <=, >, >=, in, instanceof
10. ==, !=, ===, !==
11. ?? (null 병합 연산자)
12. &&
13. ||
14. ? ... : ...
15. 할당 연산자(=, +=, -=, ...)
16. ,

7.13 연산자 결합 순서
- 좌항 → 우항
: +, -, /, %, <, <=, >, >=, &&, ||, ., [], (), ??, ?., in, instanceof
- 우항 → 좌항
: ++, --, 할당 연산자, !x, +x, -x, ++x, --x, typeof, delete, ? ... :  ..., **











