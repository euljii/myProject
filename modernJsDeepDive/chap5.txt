5장. 표현식과 문
5.1 값
- 모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트 bit 의 나열로 저장됨
- 값 생성의 가장 기본적인 방법은 리터럴을 사용하는 것

5.2 리터럴 literal
- 리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
ex) 정수 리터럴, 2진수 리터럴, 문자열 리터럴, null 리터럴 등

5.3 표현식
- 표현식 : 값으로 평가될 수 있는 문
- 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조함
ex) 
    리터럴 표현식 - 10, 'Hello'
    식별자 표현식 - sum, person.name, arr[1] // 선언이 이미 존재한다고 가정한 경우
    연산자 표현식 - 10+20, sum = 10
    함수/메소드 호출 표현식 - square(), person.getName() // 선언이 이미 존재한다고 가정한 경우

- 표현식과 표현식이 평가된 값은 동등한 관계 (동치)
-> 표현식은 값처럼 사용할 수 있음 
ex) var x = 1 + 2;
    
    x + 3; // 6 -> 식별자 표현식 x는 3으로 평가됨
    // 숫자값이 위치해야 할 자리에 표현식 쓸 수 있음

5.4 문
- 문 statement : 프로그램을 구성하는 기본 단위이자 최소 실행 단위
- 문은 여러 토큰으로 구성됨
- 토큰 token : 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소(문법적 의미)
ex) var sum = 1 + 2; // 한 개의 문에 7개의 토큰 (var,sum,=,1,+,2,;)
- 문은 선언문, 할당문, 조건문, 반복문으로 구분할 수 있음

5.5 세미콜론과 세미콜론 자동 삽입 가능
- 세미콜론(;) : 문의 종료를 나타냄 
- 중괄호({}) 뒤에는 사용x : 이미 자체 종결성을 갖기 때문
- 문 끝에 붙이는 세미콜론은 생략 가능 (세미콜론 자동 삽입 가능 ASI automatic semicolon insertion)
- 그러나 개발자가 세미콜론 자동 삽입 기능의 동작을 제대로 예측하지 못할 때 에러 발생 가능

5.6 표현식인 문과 표현식이 아닌 문 (문과 표현식의 차이)
- 표현식인 문 : 값으로 평가 가능 (할당문)
- 표현식이 아닌 문 : 값으로 평가될 수 없는 문 (선언문)
- 헷갈리면 변수에 할당해보기
ex) var foo = var x ; // SyntaxError
    // 표현식이 아닌 문은 값처럼 사용x
