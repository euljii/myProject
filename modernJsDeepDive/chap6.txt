6장. 데이터 타입
- 데이터 타입 data type : 값의 종류
- 모든 값은 데이터 타입을 가짐
- JS(ES6)는 7 개의 데이터 타입 제공
- 원시 타입 : 숫자 number 타입 - 숫자. 정수 실수 구분 없이 하나의 숫자 타입만 존재
             문자열 string 타입 - 문자열
             불리언 boolean 타입 - 논리적 참(true)과 거짓(false)
             undefined 타입 - var 키워드로 선언된 변수에 암묵적으로 할당되는 값
             null 타입 - 값이 없다는 것을 의도적으로 명시할 때 사용하는 값
             심벌 symbol 타입
- 객체 타입 (객체, 함수, 배열 등)

6.1 숫자 타입
- 다른 언어와 다르게 JS는 하나의 숫자 타입만 존재
- 모든 수를 실수로 처리 (정수를 표현하기 위한 데이터 타입 존재x)
- 숫자 타입의 세 가지 특별한 값
    - Infinity : 양의 무한대
    - -Infinity : 음의 무한대
    - NaN : 산술 연산 불가(not-a-number)
    ex) console.log(10 / 0);    // Infinity
        console.log(10 / -0);   // -Infinity
        console.log(1 * 'String');  //NaN

6.2 문자열 타입
- 텍스트 데이터 나타내는 데 사용 : 0개 이상 16비트 유니코드 문자 (UTF-16)의 집합으로 전 세계 대부분의 문자 표현
- 작은 따옴표('') -가장 일반적-, 큰 따옴표(""), 백틱(``)으로 텍스트 감싸서 문자열 표현
- 다른 언어) c는 문자열 타입 제공 없이 문자의 배열로 문자열 표현, 자바는 문자열을 객체로 표현
- JS 문자열은 원시 타입, 변경 불가능한 값

6.3 템플릿 리터럴
- ES6부터 도입
- 멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능 제공
- 런타임에 일반 문자열로 변환되어 처리됨
- 따옴표 대신 백틱(``) 사용

6.3.1 멀티라인 문자열
- 일반 문자열 내에서는 줄바꿈(개행) 허용x
-> 일반 문자열 내에서 공백 표시하려면 백슬래시(\)로 시작하는 이스케이프 시퀀스 escape sequence 사용해야 함
ex) \0 : Null, \n : 개행 등
- 템플릿 리터럴 내에서는 이스케이프 시퀀스 사용 없이 줄바꿈 허용, 공백 그대로 적용됨

6.3.2 표현식 삽입
- 문자열 연결시 문자열 연산자 + 사용 : 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작
- 템플릿 리터럴 내에서는 표현식 삽입을 통해 간단히 문자열 삽입 가능 (가독성 ↑)
- ${}으로 표현식 감싸서 사용 -> 평가 결과가 문자열 아니어도 문자열 타입으로 강제 변환되어 삽입
- 표현식 삽입은 반드시 템플릿 리터럴 내에서 사용해야 함. 일반 문자열에서 표현식 삽입할 경우 문자열로 취급됨
ex) console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3
    console.log('1 + 2 = ${1 + 2}'); // 1 + 2 = ${1 + 2}

6.4 불리언 타입
- 불리언 타입의 값은 논리적 참, 거짓을 나타내는 true, false 뿐
- 참과 거짓을 구분되는 조건에 의해 프로그램 흐름을 제어하는 조건문에서 자주 사용

6.5 undefined
- undefined 타입의 값은 undefined 가 유일
- var로 변수 선언시 암묵적으로 undefined로 초기화
- 의도적으로 변수에 undefined 할당하는 것은 혼란을 줄 수 있으므로 권장x
-> 변수에 값이 없다는 것을 명시하고 싶을 때는 null 할당

6.6 null 타입
- null 타입 값은 null이 유일
- null은 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재)할 때 사용
 : 이전에 할당되어 있던 값에 대한 참조를 명시적으로 제거하는 것을 의미
- 함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환할 수 있음
ex) var element = document.querySelector('.myClass');
    // HTML 문서에 myClass 클래스를 갖는 요소가 없다면 null 반환
    console.log(element);   // null

6.7 심벌 타입
- ES6에서 추가된 원시타입의 값
- 주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용
- Symbol 함수를 호출해 심벌 생성 (다른 원시 값은 리터럴을 통해 생성)
- 생성된 심벌은 외부에 노출x, 다른 값과 절대 중복되지 않는 유일무이한 값

ex) // 심벌 값 생성
    var key = Symbol('key');
    console.log(typeof key);    // symbol

    // 객체 생성
    var obj = {};

    // 이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용
    obj[key] = 'value';
    console.log(obj[key]);  // value

6.8 객체 타입
- JS를 이루는 거의 모든 것이 객체 타입 (객체, 함수, 배열 등)

6.9 데이터 타입의 필요성
6.9.1 데이터 타입에 의한 메모리 공간의 확보와 참조
- JS 엔진은 변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정됨
ex) var score = 100;
    // 1. 리터럴 100을 숫자 타입의 값으로 해석 2. 숫자 값 100을 위해 8byte 메모리 공간 확보 (숫자 타입은 8byte 단위로 저장) 3. 확보된 메모리에 값을 2진수로 저장

6.9.2 데이터 타입에 의한 값 해석
- 메모리에 저장된 값은 데이터 타입에 따라 다르게 해석
- 데이터 타입이 필요한 이유
 1. 저장시 확보해야 하는 메모리 공간의 크기를 결정하기 위해
 2. 값 참조할 때 한번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
 3. 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

6.10 동적 타이핑
6.10.1 동적 타입 언어와 정적 타입 언어
- JS는 변수 선언시 타입 선언x, var, let, const 키워드 사용해 변수 선언만
- 미리 선언한 데이터 타입 값만 할당할 수 있는 게 아니라, 정적 언어와 달리 ★어떠한 데이터 타입 값이라도 자유롭게 할당할 수 있음★
ex) var foo;
    console.log(typeof foo);    // undefined

    foo = 3;
    console.log(typeof foo);    // number

    foo = 'Hello';
    console.log(typeof foo);    // string

    foo = true;
    console.log(typeof foo);    // boolean

    foo = null;
    console.log(typeof foo);    // object

    foo = Symbol();
    console.log(typeof foo);    // symbol

- 동적 타이핑 dynamic typing : JS에서는 선언이 아닌 할당에 의해 타입이 결정 (타입 추론 type inference), 재할당에 의해 변수 타입 언제든지 동적으로 변할 수 있음
(↔ 정적 타입 언어는 변수 선언 시점에 변수 타입이 결정되고, 변수 타입 변경x)
-> JS는 동적 타입 dynamic/weak type 언어가 됨 (+ 파이썬, PHP, 루비, 리스프, 펄 등)
- 변수에 할당되어 있는 ★값에 의해★ 변수 타입이 동적으로 결정됨

6.10.2 동적 타입 언어와 변수 
- 동적 타입 언어는 유연성 ↑ 신뢰성 ↓
: 변수에 어떤 데이터 타입 값이라도 자유롭게 할당 가능
-> 데이터 타입에 대해 무감각해질 정도로 편리하기에 위험할 수 있음
- 변화하는 변수 값 추적의 어려움, 값 변경에 의해 타입도 언제든 변경 가능
-> 동적 타입 언어의 변수는 값 확인 전에는 타입을 확신할 수 x
- 개발자 의도와 상관없이 JS 엔진에 의해 암묵적으로 타입이 자동 변환되기도 함


